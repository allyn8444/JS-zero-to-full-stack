
* ======================= JS - E V E N T S ========================= *


- Events are interactions or occurrences that happen in the browser, and JavaScript allows you
     to respond to these events, creating dynamic and interactive web pages.

- Here's a comprehensive beginner's guide to events in JavaScript:




======================= Introduction to Events =======================

What are events?

- Events are interactions or occurrences in a web page that can be detected by JavaScript.
- Examples include clicking a button, submitting a form, moving the mouse,
     pressing a key, or resizing the window.



Why are events important in web development?

- Events enable you to create interactive and dynamic web pages.
- They allow you to respond to user actions, making your web applications
     more user-friendly and engaging.



======================= Event Types =======================


Events can be categorized into various types based on user interactions.
Some common event types include:

- Mouse events:
      Click, double click, mouseover, mouseout, etc.

- Keyboard events:
     Keydown, keyup, keypress, etc.

- Form events:
     Submit, change, focus, blur, etc.

- Window events:
     Load, resize, scroll, etc.



======================= Event Handlers =======================

- Event handlers are functions that are executed in response to a specific event.
- There are two main ways to define event handlers:


1. INLINE Event Handlers
- Inline event handlers are defined directly in the HTML element's attributes.


```html
<button onclick="myFunction()">Click me</button>
```


2. DOM Event Listeners

-DOM event listeners are preferred for better separation of HTML and JavaScript.
-They are added using JavaScript.


```javascript
const button = document.getElementById('myButton');
button.addEventListener('click', myFunction);
```





======================= Inline Event Handlers =======================

- Inline event handlers have the event code directly embedded within the HTML element's attributes.
- While they are simple, they have limitations and are considered less maintainable.


```html
<button onclick="myFunction()">Click me</button>
```


Limitations and Best Practices:

- Readability:
     Inline handlers can make HTML less readable and harder to maintain.

- Global Scope:
     Functions declared in inline handlers are added to the global scope.

- Separation of Concerns:
     It mixes HTML and JavaScript, violating the principle of separation of concerns.






======================= DOM Event Listeners =======================


- DOM event listeners are preferred for better code organization and maintainability.
- They are added using the `addEventListener` method.



```javascript
const button = document.getElementById('myButton');
button.addEventListener('click', myFunction);
```



Adding Event Listeners:

- Use `addEventListener` to attach event handlers.
- Specify the event type and the function to be executed.



Removing Event Listeners:

```javascript
button.removeEventListener('click', myFunction);
```




======================= Event Object =======================

- The event object provides information about the event and its properties.
- It is automatically passed to the event handler function.


```javascript
function myFunction(event) {
  console.log(event.type); // Event type (e.g., 'click')
  console.log(event.target); // Element that triggered the event
}
```



Common Event Object Properties:

- `event.target`:
     The element that triggered the event.

- `event.type`:
     The type of the event (e.g., 'click', 'keydown').
     
- `event.keyCode`:
     The code of the pressed key (for keyboard events).






======================= Event Delegation =======================

- Event delegation involves attaching a single event listener to a common ancestor of
     multiple elements and using conditional statements to determine the target.



Benefits and Use Cases:

- Reduces the number of event listeners.
- Works well with dynamically created elements.




```html
<ul id="myList">
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

<script>
  const myList = document.getElementById('myList');

  myList.addEventListener('click', function (event) {
    if (event.target.tagName === 'LI') {
      console.log('Clicked on:', event.target.textContent);
    }
  });
</script>
```





=======================   preventDefault()   =======================

- preventDefault() method is used to prevent the default action associated with an event.
- For example, when handling a form submission, calling preventDefault() prevents the form
     from being submitted and the page from reloading.

- Here's an updated section in the guide that includes the preventDefault() method:



EXAMPLE:

---- (for buttons and links)

const myButton = document.getElementById('myButton');

myButton.addEventListener('click', function (event) {
  event.preventDefault(); // Prevents the default action (e.g., form submission or link navigation)
  // Your code here
});




---- (form submission and validation)

const myForm = document.getElementById('myForm');

myForm.addEventListener('submit', function (event) {
  event.preventDefault(); // Prevents the form from submitting and the page from reloading
  // Your validation and form-handling code here
});




- The preventDefault() method is particularly useful when you want to handle the default action manually,
     such as performing form validation before allowing the form to submit.

- By preventing the default action, you gain more control over the behavior of your web application.






======================= Common Event Patterns =======================

Click events for buttons and links:


```javascript
const myButton = document.getElementById('myButton');

myButton.addEventListener('click', function () {
  // Your code here
});

```



Form submission and validation:


```javascript
const myForm = document.getElementById('myForm');

myForm.addEventListener('submit', function (event) {
  event.preventDefault(); // Prevents the form from submitting
  // Your validation and form-handling code here
});
```




Hover effects and tooltips:


```javascript
const myElement = document.getElementById('myElement');

myElement.addEventListener('mouseover', function () {
  // Code for mouseover event
});

myElement.addEventListener('mouseout', function () {
  // Code for mouseout event
});
```




Keyboard shortcuts:


```javascript
document.addEventListener('keydown', function (event) {
  if (event.key === 'Enter') {
    // Code for Enter key
  }
});
```

======================= Asynchronous Events =======================


`setTimeout` and `setInterval` Functions:



- setTimeout:
     Executes a function after a specified delay

EXAMPLE:


setTimeout(function () {

  // Your code here
}, 1000); // 1000 milliseconds (1 second) delay



- setInterval:
     Executes a function repeatedly at a specified interval

EXAMPLE:


const intervalId = setInterval(function () {
  // Your code here
}, 2000); // 2000 milliseconds (2 seconds) interval



-setTimeout:
     To stop the interval after a certain time
     
EXAMPLE:


setTimeout(function () {
  clearInterval(intervalId);
}, 10000); // Stop after 10 seconds







AJAX Events:

Events play a crucial role in handling asynchronous operations like AJAX requests.



```javascript
const xhr = new XMLHttpRequest();

xhr.addEventListener('load', function () {
  if (xhr.status === 200) {
    // Successful response
    console.log(xhr.responseText);
  } else {
    // Handle error
    console.error('Request failed:', xhr.status);
  }
});

xhr.open('GET', 'https://api.example.com/data');
xhr.send();
```

======================= Best Practices =======================

- Unobtrusive JavaScript:
     Keep JavaScript separate from HTML for better maintainability.

- Cross-Browser Compatibility:
     Be aware of browser differences and test your code on multiple browsers.

- Progressive Enhancement:
     Ensure your web pages work without JavaScript and enhance functionality progressively.



-----



INTRO TO EVENTS
EVENT OBJECT
SEPARATE MOUE EVENTS FROM KEYBOARD EVENTS
PREVENT DEFAULT


https://www.w3schools.com/jsref/obj_mouseevent.asp

https://www.w3schools.com/jsref/obj_keyboardevent.asp


event (e) methods and properties

